package com.chatop.chatop_backend.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.lang.NonNull;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Date;

/**
 * Filtre pour intercepter les requ√™tes HTTP et v√©rifier l'authentification JWT.
 * Ce filtre v√©rifie si un token JWT valide est pr√©sent dans l'en-t√™te Authorization.
 * Il extrait l'email de l'utilisateur depuis le token et charge les d√©tails de l'utilisateur depuis la base de donn√©es.
 * Si l'utilisateur est authentifi√©, il cr√©e un token d'authentification Spring Security et met √† jour le contexte de s√©curit√©.
 * @Component indique que cette classe est un composant Spring.
 * @RequiredArgsConstructor g√©n√®re un constructeur avec tous les champs en lecture seule.
 * @see com.chatop.chatop_backend.security.JwtService
 */
@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtService jwtService;
    private final UserDetailsService userDetailsService;
    private static final Logger log = LoggerFactory.getLogger(JwtAuthenticationFilter.class);

    @Override
    protected void doFilterInternal(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull FilterChain filterChain
    ) throws ServletException, IOException {
        // Logs sur la requ√™te entrante
        log.debug("üîç Traitement de la requ√™te: {} {}", request.getMethod(), request.getRequestURI());
        
        // R√©cup√®re l'en-t√™te Authorization
        final String authHeader = request.getHeader("Authorization");
        final String jwt;
        final String userEmail;

        // V√©rifie si l'en-t√™te Authorization est pr√©sent et commence par "Bearer "
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            // Si non, passe au filtre suivant
            log.debug("‚ö†Ô∏è Pas de header Bearer -> on laisse passer la requ√™te sans auth");
            filterChain.doFilter(request, response);
            return;
        }
        
        // Log de d√©bogage pour l'en-t√™te Authorization (version masqu√©e pour la s√©curit√©)
        String maskedAuth = authHeader.substring(0, 15) + "..." + authHeader.substring(authHeader.length() - 10);
        log.debug("üîê En-t√™te d'autorisation d√©tect√©: {}", maskedAuth);

        // Extrait le token JWT (en supprimant le pr√©fixe "Bearer ")
        jwt = authHeader.substring(7);
        
        try {
            // Extrait l'email de l'utilisateur depuis le token
            userEmail = jwtService.extractUsername(jwt);
            log.debug("üë§ Email extrait du token: {}", userEmail);
            
            // V√©rifie et log la date d'expiration du token
            Date expiration = jwtService.extractExpiration(jwt);
            log.debug("‚è±Ô∏è Expiration du token: {}, Token valide encore: {} secondes", 
                     expiration, 
                     (expiration.getTime() - System.currentTimeMillis()) / 1000);
            
            // V√©rifie si l'email existe et si l'utilisateur n'est pas d√©j√† authentifi√©
            if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                log.debug("üîç Tentative de chargement de l'utilisateur avec l'email: {}", userEmail);
                
                try {
                    // Charge les d√©tails de l'utilisateur depuis la base de donn√©es
                    UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);
                    log.debug("‚úÖ Utilisateur charg√© avec succ√®s: {}", userDetails.getUsername());
                    
                    // V√©rifie si le token est valide pour cet utilisateur
                    if (jwtService.isTokenValid(jwt, userDetails)) {
                        // Cr√©e un token d'authentification Spring Security
                        log.debug("‚úÖ Token VALIDE, authentification de l'utilisateur: {}", userDetails.getUsername());
                        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                                userDetails,
                                null,
                                userDetails.getAuthorities()
                        );
                        
                        // Ajoute les d√©tails de la requ√™te
                        authToken.setDetails(
                                new WebAuthenticationDetailsSource().buildDetails(request)
                        );
                        
                        // Met √† jour le contexte de s√©curit√© avec l'authentification
                        SecurityContextHolder.getContext().setAuthentication(authToken);
                        log.debug("üîí Contexte de s√©curit√© mis √† jour avec l'authentification");
                    } else {
                        // Si le token n'est pas valide, envoie une erreur 403
                        log.warn("‚ùå Token INVALIDE pour l'utilisateur: {}", userEmail);
                        response.sendError(HttpServletResponse.SC_FORBIDDEN, "Token invalide");
                        return;
                    }
                } catch (UsernameNotFoundException e) {
                    log.error("‚ùå √âchec de chargement de l'utilisateur: {}", userEmail, e);
                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Utilisateur non trouv√©");
                    return;
                }
            }
        } catch (Exception e) {
            log.error("‚ùå Erreur lors du traitement du token JWT: {}", e.getMessage(), e);
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Erreur de token: " + e.getMessage());
            return;
        }
        
        // Continue la cha√Æne de filtres
        log.debug("‚è© Poursuite de la cha√Æne de filtres");
        filterChain.doFilter(request, response);
    }
}
