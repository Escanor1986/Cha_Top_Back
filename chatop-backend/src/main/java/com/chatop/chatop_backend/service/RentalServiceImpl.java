package com.chatop.chatop_backend.service;

import com.chatop.chatop_backend.dto.RentalDto;
import com.chatop.chatop_backend.model.Rental;
import com.chatop.chatop_backend.model.User;
import com.chatop.chatop_backend.repository.RentalRepository;
import com.chatop.chatop_backend.repository.UserRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Cette classe impl√©mente les m√©thodes d√©finies dans l'interface RentalService.
 * Elle permet de g√©rer les locations en interagissant avec la base de donn√©es.
 * 
 * @Service: Indique √† Spring qu'il s'agit d'un bean qui doit √™tre instanci√©.
 * @Override: Indique que la m√©thode red√©finit une m√©thode de l'interface
 *            impl√©ment√©e.
 */
@Service
public class RentalServiceImpl implements RentalService {

    private final RentalRepository rentalRepository;
    private final UserRepository userRepository;
    private static final Logger log = LoggerFactory.getLogger(RentalServiceImpl.class);

    public RentalServiceImpl(RentalRepository rentalRepository, UserRepository userRepository) {
        this.rentalRepository = rentalRepository;
        this.userRepository = userRepository;
    }

    /**
     * Cr√©e une nouvelle location dans la base de donn√©es.
     * 
     * @param rentalDto Donn√©es de la location √† cr√©er
     * @return Location cr√©√©e
      */
    @Override
    public RentalDto createRental(RentalDto rentalDto) {
        log.info("üìù Cr√©ation d'une nouvelle location: {}", rentalDto.getName());
        try {

            Rental rental = mapToEntity(rentalDto);
            rental.setCreatedAt(LocalDateTime.now());
            rental.setUpdatedAt(LocalDateTime.now());

            // üî• V√©rifier que l'utilisateur existe
            User owner = userRepository.findById(rentalDto.getOwnerId())
            .orElseThrow(() -> new RuntimeException("Utilisateur non trouv√© avec l'ID: " + rentalDto.getOwnerId()));
            rental.setOwner(owner);
            
            Rental savedRental = rentalRepository.save(rental);
            return mapToDto(savedRental);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la cr√©ation de la location: {}", e.getMessage());
            throw new RuntimeException("Erreur lors de la cr√©ation de la location");
        } finally {
            log.info("üîë Location cr√©√©e avec succ√®s: {}", rentalDto.getName());
        }
    }

    /**
     * R√©cup√®re une location √† partir de son ID.
     * 
     * @param id ID de la location √† r√©cup√©rer
     * @return Location trouv√©e
      */
    @Override
    public Optional<RentalDto> getRentalById(Long id) {
        log.info("üîç Recherche de la location avec l'ID: {}", id);
        try {
            return rentalRepository.findById(id).map(this::mapToDto);
        } catch (Exception e) {
            log.error("‚ùå Location non trouv√©e avec l'ID: {}", id);
            throw new RuntimeException("Location non trouv√©e avec l'ID: " + id);
        } finally {
            log.info("‚úÖ Location trouv√©e avec succ√®s: {}", id);
        }
    }

    /**
     * R√©cup√®re toutes les locations de la base de donn√©es.
     * 
     * @return Liste de toutes les locations
      */
    @Override
    public List<RentalDto> getAllRentals() {
        log.info("üîç R√©cup√©ration de toutes les locations");
        try {
            return rentalRepository.findAll()
                    .stream()
                    .map(this::mapToDto)
                    .collect(Collectors.toList());
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des locations: {}", e.getMessage());
            throw new RuntimeException("Erreur lors de la r√©cup√©ration des locations");
        } finally {
            log.info("‚úÖ Locations r√©cup√©r√©es avec succ√®s");
        }
    }

    /**
     * Met √† jour une location existante dans la base de donn√©es.
     * 
     * @param id ID de la location √† mettre √† jour
     * @param rentalDto Donn√©es de la location √† mettre √† jour
     * @return Location mise √† jour
      */
    @Override
    public RentalDto updateRental(Long id, RentalDto rentalDto) {
        log.info("üîÑ Mise √† jour de la location avec l'ID: {}", id);
        try {

            Optional<Rental> optionalRental = rentalRepository.findById(id);
            if (optionalRental.isPresent()) {
                log.info("‚úÖ Location trouv√©e, mise √† jour des donn√©es en cours...");
                Rental rental = optionalRental.get();
                rental.setName(rentalDto.getName());
                rental.setSurface(rentalDto.getSurface());
                rental.setPrice(rentalDto.getPrice());
                rental.setPicture(rentalDto.getPicture());
                rental.setDescription(rentalDto.getDescription());
                rental.setUpdatedAt(LocalDateTime.now());
                Rental updatedRental = rentalRepository.save(rental);
                return mapToDto(updatedRental);
            } else {
                log.error("‚ùå Location non trouv√©e avec l'ID: {}", id);
                throw new RuntimeException("Location non trouv√©e avec l'ID: " + id);
            }
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la mise √† jour de la location: {}", e.getMessage());
            throw new RuntimeException("Erreur lors de la mise √† jour de la location avec l'id: " + id);
        } finally {
            log.info("üîë Location mise √† jour avec succ√®s: {}", rentalDto.getName());
        }
    }

    /**
     * Supprime une location de la base de donn√©es √† partir de son ID.
     * 
     * @param id ID de la location √† supprimer
      */
    @Override
    public void deleteRental(Long id) {
        log.info("üóëÔ∏è Suppression de la location avec l'ID: {}", id);
        try {    
            Optional<Rental> optionalRental = rentalRepository.findById(id);
            if (optionalRental.isPresent()) {
                log.info("‚úÖ Location trouv√©e, suppression en cours...");
                rentalRepository.deleteById(id);
            } else {
                log.error("‚ùå Location non trouv√©e avec l'ID: {}", id);
                throw new RuntimeException("Location non trouv√©e avec l'ID: " + id);
            }
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la suppression de la location: {}", e.getMessage());
            throw new RuntimeException("Erreur lors de la suppression de la location avec l'id: " + id);
        } finally {
            log.info("üîë Location supprim√©e avec succ√®s: {}", id);
        }
    }

   // üîπ M√©thode de mapping : Entity -> DTO
// üî• Cette m√©thode est utilis√©e pour convertir une entit√© Rental en DTO RentalDto.
private RentalDto mapToDto(Rental rental) {
    log.debug("üìä D√©but du mapping Entity -> DTO pour la location: {}", rental.getId());
    try {
        RentalDto dto = new RentalDto();
        dto.setId(rental.getId());
        dto.setName(rental.getName());
        dto.setSurface(rental.getSurface());
        dto.setPrice(rental.getPrice());
        
        // V√©rifier que le chemin n'inclut pas d√©j√† "/uploads/"
        String picturePath = rental.getPicture();
        if (picturePath != null && !picturePath.isEmpty()) {
            log.trace("üñºÔ∏è Traitement du chemin d'image: {}", picturePath);
            // V√©rifier si l'URL contient d√©j√† http://localhost:3001
            if (picturePath.startsWith("http://localhost:3001")) {
                dto.setPicture(picturePath);
            } else {
                // Si le chemin ne commence pas par "/uploads/", ajouter "/uploads/"
                if (!picturePath.startsWith("/uploads/")) {
                    picturePath = "/uploads/" + picturePath;
                    log.trace("üñºÔ∏è Ajout du pr√©fixe '/uploads/' au chemin d'image");
                }
                // Ajouter le pr√©fixe du serveur
                dto.setPicture("http://localhost:3001" + picturePath);
                log.trace("üñºÔ∏è URL d'image compl√®te g√©n√©r√©e: {}", dto.getPicture());
            }
        } else {
            dto.setPicture(null);
            log.trace("üñºÔ∏è Aucune image fournie pour cette location");
        }
        
        dto.setDescription(rental.getDescription());

        // Conversion LocalDateTime -> Date pour correspondre √† l'interface Angular
        try {
            if (rental.getCreatedAt() != null) {
                dto.setCreatedAt(java.util.Date.from(
                        rental.getCreatedAt().atZone(java.time.ZoneId.systemDefault()).toInstant()));
                log.trace("üìÖ Date de cr√©ation convertie avec succ√®s");
            }

            if (rental.getUpdatedAt() != null) {
                dto.setUpdatedAt(java.util.Date.from(
                        rental.getUpdatedAt().atZone(java.time.ZoneId.systemDefault()).toInstant()));
                log.trace("üìÖ Date de mise √† jour convertie avec succ√®s");
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Erreur lors de la conversion des dates: {}", e.getMessage());
        }
        
        dto.setOwnerId(rental.getOwner().getId());
        log.debug("‚úÖ Mapping Entity -> DTO termin√© avec succ√®s pour la location: {}", rental.getId());
        return dto;
    } catch (NullPointerException e) {
        log.error("‚ùå NullPointerException lors du mapping Entity -> DTO: {}", e.getMessage());
        throw new RuntimeException("Erreur lors du mapping: donn√©es manquantes dans l'entit√© Rental", e);
    } catch (Exception e) {
        log.error("‚ùå Erreur inattendue lors du mapping Entity -> DTO: {}", e.getMessage());
        throw new RuntimeException("Erreur lors du mapping Entity -> DTO", e);
    }
}

// üîπ M√©thode de mapping : DTO -> Entity
// üî• Cette m√©thode est utilis√©e pour convertir un objet RentalDto en entit√© Rental.
private Rental mapToEntity(RentalDto dto) {
    log.debug("üìä D√©but du mapping DTO -> Entity pour la location: {}", dto.getName());
    try {
        Rental rental = new Rental();
        rental.setName(dto.getName());
        rental.setSurface(dto.getSurface());
        rental.setPrice(dto.getPrice());

        // Gestion de l'image - extraction du chemin relatif
        String picturePath = dto.getPicture();
        if (picturePath != null && !picturePath.isEmpty()) {
            log.trace("üñºÔ∏è Traitement du chemin d'image: {}", picturePath);
            // Nettoyer les URL dupliqu√©es en supprimant toutes les instances de http://localhost:3001
            int initialLength = picturePath.length();
            while (picturePath.contains("http://localhost:3001")) {
                picturePath = picturePath.replace("http://localhost:3001", "");
            }
            if (initialLength != picturePath.length()) {
                log.trace("üñºÔ∏è URL nettoy√©e des pr√©fixes serveur");
            }

            // S'assurer que le chemin commence par /uploads/
            if (!picturePath.startsWith("/uploads/")) {
                picturePath = "/uploads/" + picturePath;
                log.trace("üñºÔ∏è Ajout du pr√©fixe '/uploads/' au chemin d'image");
            }

            rental.setPicture(picturePath);
            log.trace("üñºÔ∏è Chemin d'image final: {}", picturePath);
        } else {
            rental.setPicture(null);
            log.trace("üñºÔ∏è Aucune image fournie pour cette location");
        }
        
        rental.setDescription(dto.getDescription());

        // üî• V√©rifier l'existence du propri√©taire
        try {
            if (dto.getOwnerId() != null) {
                log.trace("üë§ Recherche du propri√©taire avec l'ID: {}", dto.getOwnerId());
                User owner = userRepository.findById(dto.getOwnerId())
                        .orElseThrow(() -> {
                            log.warn("‚ö†Ô∏è Propri√©taire non trouv√© avec l'ID: {}", dto.getOwnerId());
                            return new RuntimeException("Owner not found with id: " + dto.getOwnerId());
                        });
                rental.setOwner(owner);
                log.trace("üë§ Propri√©taire trouv√© et associ√© √† la location");
            } else {
                log.warn("‚ö†Ô∏è Aucun ID de propri√©taire fourni dans le DTO");
            }
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la recherche du propri√©taire: {}", e.getMessage());
        }

        // Conversion Date -> LocalDateTime
        try {
            if (dto.getCreatedAt() != null) {
                rental.setCreatedAt(dto.getCreatedAt().toInstant()
                        .atZone(java.time.ZoneId.systemDefault())
                        .toLocalDateTime());
                log.trace("üìÖ Date de cr√©ation convertie avec succ√®s");
            }

            if (dto.getUpdatedAt() != null) {
                rental.setUpdatedAt(dto.getUpdatedAt().toInstant()
                        .atZone(java.time.ZoneId.systemDefault())
                        .toLocalDateTime());
                log.trace("üìÖ Date de mise √† jour convertie avec succ√®s");
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Erreur lors de la conversion des dates: {}", e.getMessage());
        }

        log.debug("‚úÖ Mapping DTO -> Entity termin√© avec succ√®s pour la location: {}", dto.getName());
        return rental;
    } catch (NullPointerException e) {
        log.error("‚ùå NullPointerException lors du mapping DTO -> Entity: {}", e.getMessage());
        throw new RuntimeException("Erreur lors du mapping: donn√©es manquantes dans le DTO", e);
    } catch (Exception e) {
        log.error("‚ùå Erreur inattendue lors du mapping DTO -> Entity: {}", e.getMessage());
        throw new RuntimeException("Erreur lors du mapping DTO -> Entity", e);
    }
}
}
