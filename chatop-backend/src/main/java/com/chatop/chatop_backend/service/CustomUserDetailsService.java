package com.chatop.chatop_backend.service;

import com.chatop.chatop_backend.model.User;
import com.chatop.chatop_backend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Optional;

/**
 * Service pour charger les d√©tails de l'utilisateur √† partir de la base de donn√©es.
 * Utilis√© par Spring Security pour l'authentification et l'autorisation.
 */
@Service
@RequiredArgsConstructor
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;
    private static final Logger log = LoggerFactory.getLogger(CustomUserDetailsService.class);

    /**
     * Charge les d√©tails de l'utilisateur √† partir de son email.
     * - V√©rifie si l'utilisateur existe en base de donn√©es.
     * - Associe son r√¥le avec `ROLE_` pour respecter les conventions Spring Security.
     *
     * @param email Email de l'utilisateur
     * @return D√©tails de l'utilisateur
     * @throws UsernameNotFoundException Si l'utilisateur n'est pas trouv√©
     * 
     * !loadUserByUsername doit retourner un objet UserDetails qui contient les informations de l'utilisateur
     * !et ses r√¥les/permissions. M√™me si votre application n'utilise pas de r√¥les complexes,
     * !vous devez au minimum fournir une liste d'autorit√©s (qui peut √™tre vide ou contenir un r√¥le par d√©faut comme "USER").
     */
    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        log.debug("üîç Recherche de l'utilisateur par email: {}", email);
        
        // Recherche l'utilisateur et log le r√©sultat
        Optional<User> userOptional = userRepository.findByEmail(email);
        log.debug("üë§ Existence de l'utilisateur dans la base: {}", userOptional.isPresent());
        
        if (userOptional.isEmpty()) {
            log.error("‚ùå Utilisateur non trouv√© avec l'email: {}", email);
            throw new UsernameNotFoundException("Utilisateur non trouv√©");
        }
        
        User user = userOptional.get();
        
        // Journalisation des informations utilisateur (sans donn√©es sensibles)
        log.debug("‚úÖ Utilisateur trouv√©: id={}, email={}, r√¥le={}, cr√©ation={}", 
                user.getId(), user.getEmail(), user.getRole(), user.getCreatedAt());

        // S'assurer que le r√¥le commence bien par "ROLE_"
        String role = user.getRole().startsWith("ROLE_") ? user.getRole() : "ROLE_" + user.getRole();
        log.debug("üîí R√¥le utilis√© pour l'authentification: {}", role);

        return new org.springframework.security.core.userdetails.User(
                user.getEmail(),
                user.getPassword(),
                Collections.singletonList(new SimpleGrantedAuthority(role))
        );
    }
}

/* 
 * Remarque:
 * UserDetailsService dans Spring Security exige obligatoirement la gestion des r√¥les (ou "authorities") pour plusieurs raisons:

1. La s√©curit√© dans Spring est bas√©e sur l'authentification (qui est l'utilisateur) ET l'autorisation (ce qu'il peut faire)

2. La m√©thode `loadUserByUsername()` doit retourner un `UserDetails` qui contient n√©cessairement:
   - Identifiants de connexion
   - Mot de passe
   - Collection d'`GrantedAuthority` repr√©sentant les r√¥les/permissions

3. Ces autorit√©s sont utilis√©es pour les annotations comme `@PreAuthorize("hasRole('ADMIN')")` et les configurations de s√©curit√© comme `.hasAuthority("WRITE_PRIVILEGE")`

M√™me si votre application n'utilise pas de r√¥les complexes, vous devez au minimum fournir une liste d'autorit√©s (qui peut √™tre vide ou contenir un r√¥le par d√©faut comme "USER").

Dans l'impl√©mentation:
```java
return new User(username, password, 
    Ici, vous DEVEZ sp√©cifier une collection d'autorit√©s
    Arrays.asList(new SimpleGrantedAuthority("ROLE_USER")));
```
 */
